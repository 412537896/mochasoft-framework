<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd">

	<description>Spring公共配置</description>
	<!--  定义加载资源文件  -->
	<context:property-placeholder  location="classpath:application.properties" ignore-unresolvable="true" />
	<context:property-placeholder  location="classpath:datasource.properties" ignore-unresolvable="true" />

	<!--  使用annotation 自动注册bean,并检查@Required,@Autowired,@Resource的属性已被注入  -->
	<context:component-scan base-package="com.mochasoft" use-default-filters="false">
		<!-- 扫描符合@Service @Repository @Component 的类 -->
  		<context:include-filter type="annotation" expression="org.springframework.stereotype.Service" />
 		<context:include-filter type="annotation" expression="org.springframework.stereotype.Repository" />
 		<context:include-filter type="annotation" expression="org.springframework.stereotype.Component" />
	</context:component-scan>
    
    <!-- Mybatis配置信息 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!--configLocation属性指定mybatis的核心配置文件--> 
     	<property name="configLocation" value="classpath:MyBatisConfiguration.xml"/> 
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 扫描basePackage下所有以@MyBatisRepository标识的 接口-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.mochasoft" />
		<property name="annotationClass" value="com.mochasoft.fk.mapper.MyBatisRepository"/>
	</bean>
		
	<!-- 事务配置   spring管理mybatis的事务，事务支持2种方式：start-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
	<!-- 事务：1.使用annotation定义事务-->  
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />
	<!-- 事务：2.使用aop定义事务    支持 @AspectJ 标记，定义transactionManager作事务管理,查询方法事务为readonly,其它方法按默认设置
	<aop:aspectj-autoproxy proxy-target-class="true" />
	<tx:advice id="txAdvice">
		<tx:attributes>
			<tx:method name="get*" read-only="true"/> 
            <tx:method name="query*" read-only="true"/> 
            <tx:method name="find*" read-only="true"/> 
            <tx:method name="count*" read-only="true"/> 
            <tx:method name="select*" read-only="true"/> 
            <tx:method name="*"  />
		</tx:attributes>
	</tx:advice>
	<aop:config proxy-target-class="true">
		<aop:advisor pointcut="execution(* com.mochasoft.example.service.impl.*ServiceImpl.*(..))" advice-ref="txAdvice" />
	</aop:config>
	-->
	<!-- 事务配置   spring管理mybatis的事务，事务支持2种方式：end-->
	
	<!-- 数据源配置,使用应用内的DBCP数据库连接池 -->
	<bean id="dataSourceXZ" destroy-method="close" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${xz.jdbc.driver}" />
		<property name="url" value="${xz.jdbc.url}" />
		<property name="username" value="${xz.jdbc.username}" />
		<property name="password" value="${xz.jdbc.password}" />
		<property name="defaultAutoCommit" value="false" />
		<property name="initialSize" value="${xz.jdbc.initialSize}" />
		<property name="maxActive" value="${xz.jdbc.maxActive}" />
		<property name="maxWait" value="${xz.jdbc.maxWait}" />
		<property name="maxIdle" value="${xz.jdbc.maxIdle}" />
		<property name="minIdle" value="${xz.jdbc.minIdle}" />
	</bean>
	
	<!-- 数据源配置,使用应用内的DBCP数据库连接池 -->
	<bean id="dataSourceHN" destroy-method="close" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${hn.jdbc.driver}" />
		<property name="url" value="${hn.jdbc.url}" />
		<property name="username" value="${hn.jdbc.username}" />
		<property name="password" value="${hn.jdbc.password}" />
		<property name="defaultAutoCommit" value="false" />
		<property name="initialSize" value="${hn.jdbc.initialSize}" />
		<property name="maxActive" value="${hn.jdbc.maxActive}" />
		<property name="maxWait" value="${hn.jdbc.maxWait}" />
		<property name="maxIdle" value="${hn.jdbc.maxIdle}" />
		<property name="minIdle" value="${hn.jdbc.minIdle}" />
	</bean>
	
	<bean id="dataSource" class="com.mochasoft.fk.db.DynamicDataSource">
      <property name="targetDataSources">
          <map key-type="java.lang.String">
              <entry key="dataSourceXZ" value-ref="dataSourceXZ" />
              <entry key="dataSourceHN" value-ref="dataSourceHN" />
          </map>
      </property>
      <property name="defaultTargetDataSource" ref="dataSourceHN" />
    </bean>
</beans>