<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
    xmlns:beans="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
                        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd">
	<!-- 
    <global-method-security pre-post-annotations="enabled" />
    <debug/>
    -->
    <http pattern="/static/**" security="none"/>
    <http pattern="/login*.do" security="none"/>
    <http auto-config="true">
    	<access-denied-handler error-page="/accessDenied.do"/>
    	<!-- 注意URL要做好规划，因为拦截器以定义最先匹配顺序做为优先原则 -->
    	<!-- 
		<intercept-url pattern="/**" access="ROLE_USER" />
		 -->
		<!-- login-page:默认指定的登录页面. authentication-failure-url:出错后跳转页面. default-target-url:成功登陆后跳转页面-->  
        <form-login login-page="/login.do"  authentication-failure-url="/loginError.do"/>  
        <!-- logout-success-url:成功注销后跳转到的页面; delete-cookies属性需要在容器下进行测试-->
        <logout invalidate-session="true" logout-success-url="/login.do" logout-url="/logout" 
        	delete-cookies="JSESSIONID" /> 
        <session-management invalid-session-url="/login.do">
            <concurrency-control/>
        </session-management>
		<custom-filter ref="securityFilter" before="FILTER_SECURITY_INTERCEPTOR"/>
    </http>
	
    <!-- 认证过滤器 -->
    <beans:bean id="securityFilter" class="org.springframework.security.web.access.intercept.FilterSecurityInterceptor">
    	<!-- 用户拥有的权限 -->
    	<beans:property name="authenticationManager" ref="authenticationManager" />
    	<!-- 用户是否拥有所请求资源的权限 -->
    	<beans:property name="accessDecisionManager" ref="defaultAccessDecisionManager" />
    	<!-- 资源与权限对应关系 -->
    	<beans:property name="securityMetadataSource" ref="defaultSecurityMetadataSource" />
    </beans:bean>
    
    <!-- authentication-manager 设置alias别名  -->
    <authentication-manager alias="authenticationManager">
        <authentication-provider user-service-ref="defaultUserDetailServiceImpl" >
        	<password-encoder ref="passwordEncoder"></password-encoder>
        </authentication-provider>
    </authentication-manager>
    <!-- 访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源。 -->
    <beans:bean id="defaultAccessDecisionManager" class="com.mochasoft.fk.security.filter.DefaultAccessDecisionManager" />
    <!-- 资源源数据定义，将所有的资源和权限对应关系建立起来，即定义某一资源可以被哪些角色去访问 -->
	<beans:bean id="defaultSecurityMetadataSource" class="com.mochasoft.fk.security.filter.DefaultSecurityMetadataSource" >
		<beans:constructor-arg index="0" name="service" ref="roleService">
		</beans:constructor-arg>
	</beans:bean>
	<beans:bean id="defaultUserDetailServiceImpl" class="com.mochasoft.fk.security.filter.DefaultUserDetailServiceImpl" >
		<!-- 系统默认数据源，存储有账户和角色信息 -->
		<beans:property name="dataSource" ref="dataSource" />
		<!-- 用户登录信息所在的数据源 -->
		<beans:property name="userDataSource" ref="dataSource" />
		<!-- 用户帐号和密码 及状态查询语句 -->
		<beans:property name="usersByUsernameQuery">
			<beans:value>
				SELECT A.USER_ID,A.PASSWORD,A.STATUS,A.USERNAME FROM MOCHA_SECU_USER A WHERE A.USER_ID = ?
			</beans:value>
		</beans:property>
	</beans:bean>
	<beans:bean id="passwordEncoder" class="org.springframework.security.authentication.encoding.Md5PasswordEncoder"/>
	<!-- 工具类:在启动的时候,对明文密码进行加密,只需要执行一次即可,对数据库用户密码初始化加密 
		我们这里不考虑salt的原因是： 经常把生产环境数据迁移到测试环境，需要初始化用户的密码，所以只使用简单的md5加密
	<beans:bean class="com.mochasoft.fk.security.service.DatabasePasswordService" init-method="secureDatabase" depends-on="dataSource">
		<beans:property name="dataSource" ref="dataSource"/>	
	</beans:bean>
	-->
</beans:beans>